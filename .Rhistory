install.packages("rvest")
library(rvest)
#Specifying the url for desired website to be scraped
url <- "https://boxd.it/9IsI5"
#Reading the HTML code from the website
webpage <- read_html(url)
webpage
#Specifying the url for desired website to be scraped
url <- "https://boxd.it/8H5e"
#Reading the HTML code from the website
webpage <- read_html(url)
webpage
#Specifying the url for desired website to be scraped
url <- "https://letterboxd.com/film/the-revenant-2015/"
#Reading the HTML code from the website
webpage2 <- read_html(url)
webpage
webpage2
identical(webpage, webpage2)
summary(webpage)
summary(webpage2)
webpage$node
webpage2$node
webpage$doc
webpage
webpage[1]
#Using CSS selectors to scrape the rankings section
rank_data_html <- html_nodes(webpage,'.text-primary')
#Converting the ranking data to text
rank_data <- html_text(rank_data_html)
#Let's have a look at the rankings
head(rank_data)
# project directory
project_dir <- "C:/Users/nickw/OneDrive/Desktop/UF/Coursework/STA4241 - Statistical Learning in R/Final Project"
data <- read.csv(file.path(project_dir, "full-diary.csv"))
data
head(data)
colnames(data)
library(rvest)
# project directory
project_dir <- "C:/Users/nickw/OneDrive/Desktop/UF/Coursework/STA4241 - Statistical Learning in R/Final Project"
# load in Letterboxd diary
diary <- read.csv(file.path(project_dir, "letterboxd-data", "diary.csv"))
# remove irrelevant column "Date"
diary <- diary[,-1]
# "Tags" column is a comma-separated list; replace it with unique identifiers
# that indicate how I watched the movie (theatre, streaming, blu-ray, dvd)
diary$Tags[grepl("theatre", diary$Tags)] <- "theatre"
diary$Tags[grepl("streaming", diary$Tags)] <- "streaming"
diary$Tags[grepl("blu-ray", diary$Tags)] <- "blu-ray"
diary$Tags[grepl("dvd", diary$Tags)] <- "dvd"
diary$Tags[!grepl("theatre|streaming|blu-ray|dvd", diary$Tags)] <- ""
# load in "watched" (list of all films I've watched with links to their webpages)
films <- read.csv(file.path(project_dir, "letterboxd-data", "watched.csv"))
# initialize vectors for new attributes
runtime <- director <- writer <- editor <- cinematographer <- composer <- c()
producer <- lead <- genre <- studio <- country <- language <- c()
url <- films$Letterboxd.URI[1]
url
lbxd <- read_html(url)
footer <- html_text(lbxd %>% html_elements(".text-footer"))
runtime <- c(runtime,
as.numeric(regmatches(footer, gregexpr("[[:digit:]]+", footer))))
runtime
director <- c(director, html_text(html_nodes(lbxd,
xpath='//p/a[contains(@href,"director")]'))[1])
director
head(films)
head(diary)
films[films$Name == "Dune"]
films[films$Name == "Dune",]
url
language <- c(language, html_text(html_nodes(lbxd,
xpath='//p/a[contains(@href,"language")]')))
language
c(language, html_text(html_nodes(lbxd, xpath='//p/a[contains(@href,"language")]')))
html_text(html_nodes(lbxd, xpath='//p/a[contains(@href,"language")]')
)
html_text(html_nodes(lbxd, xpath='//p/a[contains(@href,"language")]'))
html_text(html_nodes(lbxd, xpath='//p/a[contains(@href,"language")]'))
html_text(html_nodes(lbxd, xpath='//p/a[contains(@href,"language")]'))
html_text(html_nodes(lbxd, xpath='//div/a[contains(@href,"ratings")]'))
html_text(html_nodes(lbxd, xpath='/a[contains(@href,"ratings")]'))
html_text(html_nodes(lbxd, xpath='//*[contains(@href,"ratings")]'))
html_nodes(lbxd, ".average-rating")
html_nodes(lbxd, xpath=".average-rating")
html_attr(lbxd, ".average-rating")
html_node(lbxd, xpath=".average-rating")
html_node(lbxd, ".average-rating")
html_node(lbxd, ".sidebar")
html_node(lbxd, ".sidebar .average-rating")
html_node(lbxd, ".sidebar .section ratings-histogram-chart")
html_node(lbxd, ".sidebar .section")
html_node(lbxd, ".sidebar .section.ratings-histogram-chart")
html_node(lbxd, ".sidebar")
html_node(lbxd, ".sidebar") %>% html_text()
html_node(lbxd, ".sidebar")
html_node(lbxd, ".sidebar .tooltip")
html_text(html_nodes(lbxd, xpath='//p/a[contains(@href,"language")]'))
html_text(html_nodes(lbxd, xpath='//section/a[contains(@href,"language")]'))
html_node(lbxd, "aside.sidebar")
html_node(lbxd, "span.average-rating")
html_text(html_nodes(lbxd, xpath='//*[contains(concat( " ", @class, " " ), concat( " ", "display-rating", " " ))]'))
html_nodes(lbxd, xpath='//*[contains(concat( " ", @class, " " ), concat( " ", "display-rating", " " ))]')
html_nodes(lbxd, xpath='//*[contains(concat( " ", @class, " " ), concat( " ", "display-rating", " " ))]')
html_text(html_nodes(lbxd, xpath='//*[contains(@class, "display-rating")]'))
html_text(html_nodes(lbxd, xpath='//a[contains(@class, "display-rating")]'))
html_text(html_nodes(lbxd, xpath='//p/a[contains(@class, "display-rating")]'))
html_text(html_nodes(lbxd, xpath='//div/a[contains(@class, "display-rating")]'))
html_text(html_nodes(lbxd, xpath='//*
[contains(@class, "display-rating")]'))
html_text(html_nodes(lbxd, xpath='//*[contains(concat( " ", @class, " " ), concat( " ", "ratings-histogram-chart", " " ))] | //ul | //*[contains(concat( " ", @class, " " ), concat( " ", "display-rating", " " ))]'))
html_nodes(lbxd, xpath='//*[contains(concat( " ", @class, " " ), concat( " ", "ratings-histogram-chart", " " ))] | //ul | //*[contains(concat( " ", @class, " " ), concat( " ", "display-rating", " " ))]')
html_nodes(lbxd, xpath='//*[contains(concat( " ", @class, " " ), concat( " ", "display-rating", " " ))]')
html_nodes(lbxd, xpath='//*[contains(concat( " ", @class, " " ), concat( " ", "ratings-histogram-chart", " " ))]')
html_nodes(lbxd, xpath='//*[contains(concat( " ", @class, " " ), concat( " ", "ratings-histogram-chart", " " ))] | //ul | //*[contains(concat( " ", @class, " " ), concat( " ", "display-rating", " " ))]')
lbxd %>%
html_elements("a") %>%
html_attr("href")
lbxd %>%
html_elements("a") %>%
html_nodes(lbxd, xpath='[contains(@href,"language")]')
lbxd %>%
html_elements("a") %>%
html_elements("href")
lbxd %>%
html_elements("a") %>%
html_attr("href")
lbxd %>%
html_elements("a") %>%
html_elements(".display-rating")
lbxd %>%
html_elements("a") %>%
html_elements(".tooltip-display-rating")
lbxd %>%
html_elements("a") %>%
html_elements(".display-rating")
lbxd %>%
html_elements("a") %>%
html_elements(".tooltip.display-rating")
lbxd %>%
html_elements(".tooltip.display-rating")
lbxd %>%
html_elements(".tooltip, .display-rating")
lbxd %>%
html_elements(".display-rating")
html_elements(lbxd, ".display-rating")
html_elements(lbxd, ".average-rating")
lbxd %>%
html_elements("a") %>%
html_attr("data-original-title")
lbxd %>%
html_elements("a") %>%
html_attr("class")
lbxd %>%
html_elements("a") %>%
html_attr("class") %>% html_attr("data-original-title")
lbxd %>%
html_elements("a") %>%
html_attr("data-original-title")
html_nodes?
)
?html_nodes
?xml_nodes
lbxd %>%
html_elements(".tooltip.display-rating")
lbxd %>% html_nodes(".tooltip.display-rating")
html_text(html_nodes(lbxd, xpath='.//a[contains(@href,"ratings")]'))
html_text(html_nodes(lbxd, xpath='.//a[contains(@href,"ratings")]'))
html_text(html_nodes(lbxd, xpath='.//a[contains(@href,"film")]'))
html_nodes(lbxd, xpath='.//a[contains(@href,"film")]')
html_nodes(lbxd, xpath='.//*[contains(@class,"average")]')
html_nodes(lbxd, xpath='.//*[contains(@class,"rating")]')
html_nodes(lbxd, xpath='[contains(@class,"rating")]')
html_nodes(lbxd, xpath='//[contains(@class,"rating")]')
html_nodes(lbxd, xpath='//a[contains(@class,"rating")]')
html_nodes(lbxd, xpath='//[contains(@class,"rating")]')
html_nodes(lbxd, xpath='//*[contains(concat( " ", @class, " " ), concat( " ", "display-rating", " " ))]')
html_nodes(lbxd, xpath='//[contains(@itemprop,"Rating")]')
html_nodes(lbxd, xpath='//*[contains(@itemprop,"Rating")]')
html_nodes(lbxd, xpath='.//*[contains(@itemprop,"Rating")]')
html_nodes(lbxd, xpath='.//*[contains(@class,"Rating")]')
html_nodes(lbxd, xpath='.//*[contains(@class,"rating")]')
html_nodes(lbxd, xpath='//*[contains(concat( " ", @class, " " ), concat( " ", "average-rating", " " ))] | //*[contains(concat( " ", @class, " " ), concat( " ", "display-rating", " " ))]')
html_nodes(lbxd, xpath='//ul | //*[contains(concat( " ", @class, " " ), concat( " ", "average-rating", " " ))] | //*[contains(concat( " ", @class, " " ), concat( " ", "display-rating", " " ))]')
html_nodes(lbxd,
xpath='//p/a[contains(@href,"language")]')
html_nodes(lbxd, xpath='//p/a[contains(@href,"language")]')
lbxd %>%
html_nodes(".tooltip")
lbxd %>% html_nodes(".tooltip") %>% str_subset(., "display-rating")
lbxd %>% html_nodes(".tooltip") %>% html_attr("href")
html_nodes(lbxd, xpath='//*[@id="film-page-wrapper"]/div[2]/aside/section[2]/span/a')
html_nodes(lbxd, xpath='/html/body/div[4]/div/div/div[2]/aside/section[2]/span/a')
html_nodes(lbxd, xpath='/html/body/div[4]/div/div/div[2]/aside/section[2]/span/a')
html_nodes(lbxd, xpath='//*[@id="film-page-wrapper"]/div[2]/aside/section[2]/span')
html_nodes(lbxd, xpath='/html/body/div[4]/div/div/div[2]/aside/section[2]/span')
html_nodes(lbxd, xpath='//p/a[contains(@href,"language")]')
html_nodes(lbxd, xpath='//p/a[contains(@href,"ratings")]')
html_nodes(lbxd, xpath='//*[contains(@href,"ratings")]')
html_nodes(lbxd, xpath='.//*[contains(@href,"ratings")]')
html_nodes(lbxd, ".sidebar")
html_nodes(lbxd, ".sidebar") %>% html_nodes(lbxd, ".actions-panel")
html_nodes(lbxd, ".sidebar")
html_text(html_nodes(lbxd, ".sidebar"))
html_nodes(lbxd, ".sidebar")
html_nodes(lbxd, ".sidebar") %>% html_attr("section")
html_nodes(lbxd, "#userpanel")
html_nodes(lbxd, ".sidebar")
html_nodes(lbxd, ".sidebar.section")
html_nodes(lbxd, ".ratings-histogram-chart")
html_nodes(lbxd, ".sidebar")
html_nodes(lbxd, ".sidebar")
//*[@id="film-page-wrapper"]/div[2]/aside
html_nodes(lbxd, xpath='//*[@id="film-page-wrapper"]/div[2]/aside')
html_nodes(lbxd, xpath='//*[@id="film-page-wrapper"]/div[2]/aside/section')
html_nodes(lbxd, xpath='//*[@id="film-page-wrapper"]/div[2]/aside/section[2')
html_nodes(lbxd, xpath='//*[@id="film-page-wrapper"]/div[2]/aside/section[2]')
html_nodes(lbxd, xpath='//*[@id="film-page-wrapper"]/div[2]/aside/section')
//*[@id="film-page-wrapper"]/div[2]/aside/section[2]
html_nodes(lbxd, xpath='//*[@id="film-page-wrapper"]/div[2]/aside/section')
html_nodes(lbxd, xpath='//*[@id="film-page-wrapper"]/div[2]/aside/section[2]/span/a')
//*[@id="film-page-wrapper"]/div[2]/aside/section[2]
html_nodes(lbxd, xpath='//*[@id="film-page-wrapper"]/div[2]/aside/section[2]/span/a')
html_nodes(lbxd, xpath='//*[@id="film-page-wrapper"]/div[2]/aside/section/span/a')
html_nodes(lbxd, xpath='//*[@id="film-page-wrapper"]/div[2]/aside/[contains(@class, "section")]')
html_nodes(lbxd, xpath='//*[@id="film-page-wrapper"]/div[2]/aside//*[contains(@class, "section")]')
html_nodes(lbxd, xpath='//*[@id="film-page-wrapper"]/div[2]/aside/section')
html_nodes(lbxd, xpath='//*[@id="film-page-wrapper"]/div[2]/aside/')
html_nodes(lbxd, xpath='//*[@id="film-page-wrapper"]/div[2]/aside')
aside <- html_nodes(lbxd, xpath='//*[@id="film-page-wrapper"]/div[2]/aside')
aside
print.AsIs(aside)
print(aside)
print(aside, ma=300)
print.AsIs(aside)
print.AsIs(aside[1])
aside[1]
aside[2]
print.AsIs(aside[1])
print.AsIs(aside)
print.AsIs(aside)
aside
hidden_nodes <- html_tree %>%
html_nodes(".actions-panel")
hidden_nodes <- asode %>%
html_nodes(".actions-panel")
hidden_nodes <- aside %>%
html_nodes(".actions-panel")
hidden_nodes
xml_remove(hidden_nodes)
library(purrr)
xml_remove(hidden_nodes)
html_remove(hidden_nodes)
library(xml2)
xml_remove(hidden_nodes)
aside
print.asIs(aside)
print.AsIs(aside)
aside
html_text(aside)
html_node(aside, ".js-csi")
html_text(aside)
html_node(aside, ".js-csi")
aside
aside <- html_nodes(lbxd, xpath='//*[@id="film-page-wrapper"]/div[2]/aside')
aside
print.AsIs(aside)
aside <- html_nodes(lbxd, xpath='//*[@id="film-page-wrapper"]/div[2]/aside')
asdie
aside
lbxd <- read_html(url)
aside <- html_nodes(lbxd, xpath='//*[@id="film-page-wrapper"]/div[2]/aside')
aside
print.AsIs(aside)
aside
//*[@id="film-page-wrapper"]/div[2]/aside/section[2]
aside <- html_nodes(lbxd, xpath='//*[@id="film-page-wrapper"]/div[2]/aside/section')
section <- html_nodes(lbxd, xpath='//*[@id="film-page-wrapper"]/div[2]/aside/section')
section
html_nodes(lbxd, xpath='//*[@id="film-page-wrapper"]/div[2]/aside/section[1')
html_nodes(lbxd, xpath='//*[@id="film-page-wrapper"]/div[2]/aside/section[1]')
html_nodes(lbxd, xpath='//*[@id="film-page-wrapper"]/div[2]/aside/section[2]')
asid e
aside
library(RSelenium)
install.packages("RSelenium")
library(RSelenium)
# starting local RSelenium (this is the only way to start RSelenium that is working for me atm)
selCommand <- wdman::selenium(jvmargs = c("-Dwebdriver.chrome.verboseLogging=true"), retcommand = TRUE)
shell(selCommand, wait = FALSE, minimized = TRUE)
remDr <- remoteDriver(port = 4567L, browserName = "chrome")
remDr$open()
# starting local RSelenium (this is the only way to start RSelenium that is working for me atm)
selCommand <- wdman::selenium(jvmargs = c("-Dwebdriver.chrome.verboseLogging=true"), retcommand = TRUE)
shell(selCommand, wait = FALSE, minimized = TRUE)
remDr <- remoteDriver(port = 4444, browserName = "chrome")
remDr$open()
remDr
selServ <- selenium(jvmargs = c("-Dwebdriver.chrome.verboseLogging=true"))
remDr <- remoteDriver(port = 4567L, browserName = "chrome")
remDr$open()
selServ$log()
library(wdman)
selServ <- selenium(jvmargs = c("-Dwebdriver.chrome.verboseLogging=true"))
remDr <- remoteDriver(port = 4567L, browserName = "chrome")
remDr$open()
selServ$log()
2+2
require(RSelenium)
RSelenium::startServer()
remDr <- remoteDriver(browserName = "chrome")
remDr$open()
RSelenium::startServer()
# starting local RSelenium (this is the only way to start RSelenium that is working for me atm)
selCommand <- wdman::selenium(jvmargs = c("-Dwebdriver.chrome.verboseLogging=true"), retcommand = TRUE)
# starting local RSelenium (this is the only way to start RSelenium that is working for me atm)
selCommand <- wdman::selenium(jvmargs = c("-Dwebdriver.chrome.verboseLogging=true"), retcommand = TRUE)
shell(selCommand, wait = FALSE, minimized = TRUE)
remDr <- remoteDriver(port = 4567L, browserName = "chrome")
remDr$open()
# starting local RSelenium (this is the only way to start RSelenium that is working for me atm)
selCommand <- wdman::selenium(jvmargs = c("-Dwebdriver.chrome.verboseLogging=true"), retcommand = TRUE)
driver <- remoteDriver()
driver$open()
driver$navigate("https://www.google.com/")
library(RSelenium)
rD <- rsDriver() # runs a chrome browser, wait for necessary files to download
remDr <- rD$client
# no need for remDr$open() browser should already be open
library(RSelenium)
rD <- rsDriver() # runs a chrome browser, wait for necessary files to download
aside
section
url
aside
html_text(aside)
url
lbxd
aside <- html_nodes(lbxd, xpath='//*[@id="film-page-wrapper"]/div[2]/aside/section')
library(rvest)
aside <- html_nodes(lbxd, xpath='//*[@id="film-page-wrapper"]/div[2]/aside/section')
lbxd <- read_htlm(url)
lbxd <- read_html(url)
aside <- html_nodes(lbxd, xpath='//*[@id="film-page-wrapper"]/div[2]/aside/section')
aside
print.AsIs(aside)
library(jsonlite)
jsonlite::fromJSON(url)
writeLines(sprintf("var page = require('webpage').create();
page.open('%s', function () {
console.log(page.content); //page source
phantom.exit();
});", url), con="scrape.js")
system("phantomjs scrape.js > scrape.html", intern = T)
2+2
url
writeLines(sprintf("var page = require('webpage').create();
page.open('%s', function () {
console.log(page.content); //page source
phantom.exit();
});", url), con="scrape.js")
system("phantomjs scrape.js > scrape.html", intern = T)
library(webdriver)
install_phantomjs
install.packages("webdriver")
library(webdriver)
install_phantomjs()
writeLines(sprintf("var page = require('webpage').create();
page.open('%s', function () {
console.log(page.content); //page source
phantom.exit();
});", url), con="scrape.js")
system("phantomjs scrape.js > scrape.html", intern = T)
system("phantomjs scrape.js > scrape.html", intern = T)
system("phantomjs scrape.js > scrape.html", intern = T)
library(webshot)
install.packages("webshot")
library(webshot)
webshot::install_phantomjs()
writeLines(sprintf("var page = require('webpage').create();
page.open('%s', function () {
console.log(page.content); //page source
phantom.exit();
});", url), con="scrape.js")
system("phantomjs scrape.js > scrape.html", intern = T)
system("phantomjs scrape.js > scrape.html", intern = T)
# extract the content you need
pg <- html("scrape.html")
library(rvest)
# extract the content you need
pg <- html("scrape.html")
pg %>% html_nodes("#utime") %>% html_text()
# extract the content you need
pg <- html("scrape.html")
# extract the content you need
pg <- read_html("scrape.html")
sink("scrape.txt")
system("phantomjs scrape.js > scrape.html", intern = T)
sink()
# extract the content you need
pg <- read_html("scrape.html")
# extract the content you need
pg <- read_html("scrape.txt")
pg
//*[@id="html"]/head/meta[20]
url
lbxd <- read_html(url)
html_nodes(lbxd, xpath='//p/a[contains(@href,"language")]')
html_nodes(lbxd, xpath=' //*[@id="html"]/head/meta')
html_nodes(lbxd, xpath=' //*[@id="html"]/head/meta[21]')
html_text(html_nodes(lbxd, xpath=' //*[@id="html"]/head/meta[21]'))
twitter <- html_nodes(lbxd, xpath=' //*[@id="html"]/head/meta[21]')
twitter
html_attr(twitter, "content")
# initialize vectors for new attributes
runtime <- director <- writer <- editor <- cinematographer <- composer <- c()
producer <- lead <- genre <- studio <- country <- language <- average <- c()
html_attr(twitter, "content")
substring(html_attr(twitter, "content"), 4)
substring(html_attr(twitter, "content"), 1, 4)
as.numeric(substring(html_attr(html_nodes(lbxd,
xpath=' //*[@id="html"]/head/meta[21]'), "content")))
as.numeric(substring(html_attr(html_nodes(lbxd,
xpath=' //*[@id="html"]/head/meta[21]'), "content"), 1, 4))
rm(list=ls())
# project directory
project_dir <- "C:/Users/nickw/OneDrive/Desktop/UF/Coursework/STA4241 - Statistical Learning in R/Final Project"
# load in Letterboxd diary
diary <- read.csv(file.path(project_dir, "letterboxd-data", "diary.csv"))
# remove irrelevant column "Date"
diary <- diary[,-1]
# "Tags" column is a comma-separated list; replace it with unique identifiers
# that indicate how I watched the movie (theatre, streaming, blu-ray, dvd)
diary$Tags[grepl("theatre", diary$Tags)] <- "theatre"
diary$Tags[grepl("streaming", diary$Tags)] <- "streaming"
diary$Tags[grepl("blu-ray", diary$Tags)] <- "blu-ray"
